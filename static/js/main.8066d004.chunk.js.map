{"version":3,"sources":["svg/Pin1.svg","svg/Ton.svg","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Tile.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","quizQuestions","question","answers","type","content","Question","props","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Tile","src","ton","alt","Quiz","questionId","questionTotal","answerOptions","map","key","Result","quizResult","App","setQuiz","event","target","setState","quizId","state","answerCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","shuffleArray","this","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCount","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","onClick","logo","renderHome","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8066d004.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pin1.7be2b280.svg\";","module.exports = __webpack_public_path__ + \"static/media/Ton.ae58025e.svg\";","const quizQuestions = [\n  {\n    question: \"나 좋나\",\n    answers: [\n      {\n        type: \"1\",\n        content: \"YES\"\n      },\n      {\n        type: \"2\",\n        content: \"예아\"\n      },\n      {\n        type: \"3\",\n        content: \"당연\"\n      }\n    ]\n  },\n];\nexport default quizQuestions;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Question(props) {\n  return (\n    <h2 className=\"question\">{props.content}</h2>\n  );\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected} />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};","import React from 'react';\nimport ton from '../svg/Ton.svg';\n\nexport default function Tile(props) {\n  return (\n    <img className=\"App-logo\" src={ton} alt=\"Ton\" />\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from './Question';\nimport QuestionCount from './QuestionCount';\nimport AnswerOption from './AnswerOption';\nimport Tile from './Tile';\n\nexport default function Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n  return (\n    <div className=\"quiz\">\n      <QuestionCount\n        counter={props.questionId}\n        total={props.questionTotal} />\n      <Question content={props.question} />\n        <Tile />\n      <ul className=\"answerOptions\">\n        {props.answerOptions.map(renderAnswerOptions)}\n      </ul>\n    </div>\n  );\n}\n\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Result(props) {\n  return (\n    <div className=\"result\">\n      You Prefer <strong>{props.quizResult}</strong>!\n    </div>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\n// import logo from './svg/logo.svg';\nimport logo from './svg/Pin1.svg';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizId: '',\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answerCount: {},\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n  setUserAnswer(answer) {\n    this.setState((state) => ({\n      answersCount: {\n        ...state.answerCount,\n        [answer]: (state.answerCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: \"\"\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n  setQuiz = (event) => {\n    let id = event.target.id;\n    this.setState({\n      quizId: id\n    });\n  }\n\n  renderHome() {\n    return (\n      <div>\n        <li>\n          <button id=\"mahjong\" onClick={this.setQuiz}>마작</button>\n        </li>\n      </div>\n    );\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    );\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>마작 퀴즈</h2>\n        </div>\n        {this.state.quizId === '' ? this.renderHome() : this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}