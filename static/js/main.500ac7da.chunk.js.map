{"version":3,"sources":["svg/Pin1.svg","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","quizQuestions","question","answers","type","content","Question","props","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","questionId","questionTotal","answerOptions","map","key","Result","quizResult","App","setQuiz","event","target","setState","quizId","state","questionCount","correctCount","result","handleAnswerSelected","bind","this","length","shuffledAnswerOptions","shuffleArray","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","setUserAnswer","currentTarget","console","log","setTimeout","setNextQuestion","setResults","getResults","res","onClick","src","logo","alt","renderHome","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.500ac7da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pin1.7be2b280.svg\";","const quizQuestions = [\n  {\n    question: \"다음 중 멘젠이 아닌 것은?\",\n    answers: [\n      {\n        type: \"correct\",\n        content: \"삼원 패 중 하나를 펑한 상태\"\n      },\n      {\n        type: \"wrong1\",\n        content: \"리치 선언 후\"\n      },\n      {\n        type: \"wrong2\",\n        content: \"안깡을 한 상태\"\n      },\n      {\n        type: \"wrong3\",\n        content: \"치또이 텐파이 상태\"\n      }\n    ]\n  },\n  {\n    question: \"핑후의 조건이 아닌 것은?\",\n    answers: [\n      {\n        type: \"correct\",\n        content: \"1, 9 수패를 가지지 않을 것\"\n      },\n      {\n        type: \"wrong1\",\n        content: \"머리가 자풍, 장풍이 아닐 것\"\n      },\n      {\n        type: \"wrong2\",\n        content: \"몸통이 모두 슌쯔일 것\"\n      },\n      {\n        type: \"wrong3\",\n        content: \"양면 대기 일 것\"\n      }\n    ]\n  },\n  {\n    question: \"다음 중 울어도 역이 성립하는 것은?\",\n    answers: [\n      {\n        type: \"correct\",\n        content: \"일기통관\"\n      },\n      {\n        type: \"wrong1\",\n        content: \"리치\"\n      },\n      {\n        type: \"wrong2\",\n        content: \"일빼이커\"\n      },\n      {\n        type: \"wrong3\",\n        content: \"핑후\"\n      }\n    ]\n  },\n];\nexport default quizQuestions;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Question(props) {\n  return (\n    <h2 className=\"question\">{props.content}</h2>\n  );\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter + 1}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected} />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Question from './Question';\nimport QuestionCount from './QuestionCount';\nimport AnswerOption from './AnswerOption';\n\nexport default function Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n  return (\n    <div className=\"quiz\">\n      <QuestionCount\n        counter={props.questionId}\n        total={props.questionTotal} />\n      <Question content={props.question} />\n      <ul className=\"answerOptions\">\n        {props.answerOptions.map(renderAnswerOptions)}\n      </ul>\n    </div>\n  );\n}\n\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Result(props) {\n  return (\n    <div className=\"result\">\n      <h2> {props.quizResult} </h2>\n    </div>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport logo from './svg/Pin1.svg';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizId: '',\n      // user가 풀 문제의 수\n      questionCount: 7,\n      // 푼 문제 수\n      counter: 0,\n      // 현재 question의 id\n      questionId: 0,\n      question: '',\n      // 답 보기들\n      answerOptions: [],\n      // 제시된 답\n      answer: '',\n      correctCount: 0,\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const questionCount = (this.state.questionCount > quizQuestions.length) ? quizQuestions.length : this.state.questionCount;\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\n    this.setState({\n      questionCount: questionCount,\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n  shuffleArray(array) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: \"\"\n    });\n  }\n\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n    console.log(this.state.counter);\n    console.log(quizQuestions.length);\n    if (this.state.counter < quizQuestions.length - 1) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n  setUserAnswer(answer) {\n    console.log(answer);\n    const correctCount = (answer === \"correct\") ? this.state.correctCount + 1 : this.state.correctCount;\n    this.setState({\n      answer: answer,\n      correctCount: correctCount\n    });\n  }\n\n  getResults() {\n    /*\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    //return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    */\n    return this.state.correctCount;\n  }\n\n  setResults(result) {\n    /*\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n    */\n\n    let res = (this.state.questionCount - result) + \"개 틀렸습니다.\";\n    if (result === this.state.questionCount)\n      res = \"축하합니다~! 모두 다 맞았습니다.\";\n    this.setState({ result: res });\n  }\n  setQuiz = (event) => {\n    let id = event.target.id;\n    this.setState({\n      quizId: id\n    });\n  }\n\n  renderHome() {\n    return (\n      <div>\n        <h2 className=\"homeText\"> 퀴즈를 선택하세요</h2>\n        <li className=\"homeOption\">\n          <input type=\"button\" className=\"homeButton\" id={1} value=\"마작\" onClick={this.setQuiz} />\n        </li>\n      </div>\n    );\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    );\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>마작 퀴즈</h2>\n        </div>\n        {this.state.quizId === '' ? this.renderHome() : this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}